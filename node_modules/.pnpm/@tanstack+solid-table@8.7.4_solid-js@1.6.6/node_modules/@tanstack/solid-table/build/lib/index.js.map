{"version":3,"file":"index.js","sources":["../../src/index.tsx"],"sourcesContent":["// /** @jsxImportSource solid-js */\nimport {\n  TableOptions,\n  createTable,\n  TableOptionsResolved,\n  RowData,\n} from '@tanstack/table-core'\nimport { createComputed, mergeProps, createComponent } from 'solid-js'\nimport { createStore } from 'solid-js/store'\n\nexport * from '@tanstack/table-core'\n\nexport function flexRender<TProps extends {}>(Comp: any, props: TProps) {\n  if (!Comp) return null\n\n  if (typeof Comp === 'function') {\n    return createComponent(Comp, props)\n  }\n\n  return Comp\n}\n\nexport function createSolidTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  const resolvedOptions: TableOptionsResolved<TData> = mergeProps(\n    {\n      state: {}, // Dummy state\n      onStateChange: () => {}, // noop\n      renderFallbackValue: null,\n      mergeOptions: (\n        defaultOptions: TableOptions<TData>,\n        options: Partial<TableOptions<TData>>\n      ) => {\n        return mergeProps(defaultOptions, options) as TableOptions<TData>\n      },\n    },\n    options\n  )\n\n  const table = createTable<TData>(resolvedOptions)\n  const [state, setState] = createStore(table.initialState)\n\n  createComputed(() => {\n    table.setOptions(prev => {\n      return mergeProps(prev, options, {\n        state: mergeProps(state, options.state || {}),\n        // Similarly, we'll maintain both our internal state and any user-provided\n        // state.\n        onStateChange: (updater: any) => {\n          // merging isn't required because stores shallow update\n          setState(updater)\n\n          options.onStateChange?.(updater)\n        },\n      })\n    })\n  })\n\n  return table\n}\n"],"names":["flexRender","Comp","props","createComponent","createSolidTable","options","resolvedOptions","mergeProps","state","onStateChange","renderFallbackValue","mergeOptions","defaultOptions","table","createTable","setState","createStore","initialState","createComputed","setOptions","prev","updater"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAYO,SAASA,UAAU,CAAoBC,IAAS,EAAEC,KAAa,EAAE;AACtE,EAAA,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI,CAAA;AAEtB,EAAA,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;AAC9B,IAAA,OAAOE,uBAAe,CAACF,IAAI,EAAEC,KAAK,CAAC,CAAA;AACrC,GAAA;AAEA,EAAA,OAAOD,IAAI,CAAA;AACb,CAAA;AAEO,SAASG,gBAAgB,CAC9BC,OAA4B,EAC5B;EACA,MAAMC,eAA4C,GAAGC,kBAAU,CAC7D;IACEC,KAAK,EAAE,EAAE;AAAE;IACXC,aAAa,EAAE,MAAM,EAAE;AAAE;AACzBC,IAAAA,mBAAmB,EAAE,IAAI;AACzBC,IAAAA,YAAY,EAAE,CACZC,cAAmC,EACnCP,OAAqC,KAClC;AACH,MAAA,OAAOE,kBAAU,CAACK,cAAc,EAAEP,OAAO,CAAC,CAAA;AAC5C,KAAA;GACD,EACDA,OAAO,CACR,CAAA;AAED,EAAA,MAAMQ,KAAK,GAAGC,qBAAW,CAAQR,eAAe,CAAC,CAAA;EACjD,MAAM,CAACE,KAAK,EAAEO,QAAQ,CAAC,GAAGC,iBAAW,CAACH,KAAK,CAACI,YAAY,CAAC,CAAA;AAEzDC,EAAAA,sBAAc,CAAC,MAAM;AACnBL,IAAAA,KAAK,CAACM,UAAU,CAACC,IAAI,IAAI;AACvB,MAAA,OAAOb,kBAAU,CAACa,IAAI,EAAEf,OAAO,EAAE;QAC/BG,KAAK,EAAED,kBAAU,CAACC,KAAK,EAAEH,OAAO,CAACG,KAAK,IAAI,EAAE,CAAC;AAC7C;AACA;QACAC,aAAa,EAAGY,OAAY,IAAK;AAC/B;UACAN,QAAQ,CAACM,OAAO,CAAC,CAAA;AAEjBhB,UAAAA,OAAO,CAACI,aAAa,GAAGY,OAAO,CAAC,CAAA;AAClC,SAAA;AACF,OAAC,CAAC,CAAA;AACJ,KAAC,CAAC,CAAA;AACJ,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOR,KAAK,CAAA;AACd;;;;;;;;;;;"}
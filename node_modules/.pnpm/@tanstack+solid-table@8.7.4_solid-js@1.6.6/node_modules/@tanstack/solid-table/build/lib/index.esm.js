/**
 * solid-table
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
import { createTable } from '@tanstack/table-core';
export * from '@tanstack/table-core';
import { createComponent, mergeProps, createComputed } from 'solid-js';
import { createStore } from 'solid-js/store';

// /** @jsxImportSource solid-js */
function flexRender(Comp, props) {
  if (!Comp) return null;
  if (typeof Comp === 'function') {
    return createComponent(Comp, props);
  }
  return Comp;
}
function createSolidTable(options) {
  const resolvedOptions = mergeProps({
    state: {},
    // Dummy state
    onStateChange: () => {},
    // noop
    renderFallbackValue: null,
    mergeOptions: (defaultOptions, options) => {
      return mergeProps(defaultOptions, options);
    }
  }, options);
  const table = createTable(resolvedOptions);
  const [state, setState] = createStore(table.initialState);
  createComputed(() => {
    table.setOptions(prev => {
      return mergeProps(prev, options, {
        state: mergeProps(state, options.state || {}),
        // Similarly, we'll maintain both our internal state and any user-provided
        // state.
        onStateChange: updater => {
          // merging isn't required because stores shallow update
          setState(updater);
          options.onStateChange?.(updater);
        }
      });
    });
  });
  return table;
}

export { createSolidTable, flexRender };
//# sourceMappingURL=index.esm.js.map
